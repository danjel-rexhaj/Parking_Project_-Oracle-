/********************************************************************************************************************************************************/

CREATE TABLE Grupe_Klientesh (
    GrupID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Emri_Grupit VARCHAR2(100) NOT NULL,
    Zbritje NUMBER(3)
);

INSERT INTO Grupe_Klientesh (Emri_Grupit, Zbritje) VALUES ('VIP', 30);
INSERT INTO Grupe_Klientesh (Emri_Grupit, Zbritje) VALUES ('STUDENT', 20);
INSERT INTO Grupe_Klientesh (Emri_Grupit, Zbritje) VALUES ('REZIDENT', 10);

/********************************************************************************************************************************************************/

CREATE TABLE Klientet (
    KlientID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Emri VARCHAR2(100) NOT NULL,
    Mbiemri VARCHAR2(100) NOT NULL,
    NrKontakti VARCHAR2(15),
    Email VARCHAR2(100),
    Adresa VARCHAR2(255),
    GrupID NUMBER,
    KarteID NUMBER,
    CONSTRAINT fk_grupid FOREIGN KEY (GrupID) REFERENCES Grupe_Klientesh(GrupID),
    CONSTRAINT fk_karteid FOREIGN KEY (KarteID) REFERENCES Karte_Antarsie(KarteID)
);

INSERT INTO Klientet (Emri, Mbiemri, NrKontakti, Email, Adresa, GrupID, KarteID)
VALUES ('Ardit', 'Hoxha', '0691234567', 'ardit.hoxha@gmail.com', 'Rruga 1, Tirane', 3, 1);

INSERT INTO Klientet (Emri, Mbiemri, NrKontakti, Email, Adresa, GrupID, KarteID)
VALUES ('Elira', 'Dema', '0687654321', 'elira.dema@yahoo.com', 'Rruga 2, Tirane', 2, 2);

INSERT INTO Klientet (Emri, Mbiemri, NrKontakti, Email, Adresa, GrupID, KarteID)
VALUES ('DANJEL', 'REXHAJ', '0696238279', 'eagledrop19@gmail.com', 'Rruga 2, Tirane', 1, 3);

INSERT INTO Klientet (Emri, Mbiemri, NrKontakti, Email, Adresa, GrupID, KarteID)
VALUES ('Hysen', 'Hoxha', '0681264567', 'Hysen.hoxha@gmail.com', 'Rruga 1, Tirane', 1, 4);

INSERT INTO Klientet (Emri, Mbiemri, NrKontakti, Email, Adresa, GrupID, KarteID)
VALUES ('Isan', 'Dema', '0695654321', 'Isan.dema@yahoo.com', 'Rruga 2, Tirane', 2, 5);

INSERT INTO Klientet (Emri, Mbiemri, NrKontakti, Email, Adresa, GrupID, KarteID)
VALUES ('Hajdar', 'REXHAJ', '0696233379', 'Hajdar.REXHAJ@gmail.com', 'Rruga 2, Tirane', 2, 6);


/********************************************************************************************************************************************************/

CREATE TABLE Pika_Parkimi (
    PikeID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Vendodhje VARCHAR2(255) NOT NULL
); 

INSERT INTO Pika_Parkimi (Vendodhje)
VALUES ('Tirane');

INSERT INTO Pika_Parkimi (Vendodhje)
VALUES ('Kamez');

/********************************************************************************************************************************************************/

CREATE TABLE Mjetet (
    MjetID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Targa VARCHAR2(15) CONSTRAINT uq_targa UNIQUE,
    KlientID NUMBER,
    CONSTRAINT fk_klientid FOREIGN KEY (KlientID) REFERENCES Klientet(KlientID)
);


INSERT INTO Mjetet (Targa, KlientID)
VALUES ('AA123AA', 1);

INSERT INTO Mjetet (Targa, KlientID)
VALUES ('BB456BB', 2);

INSERT INTO Mjetet (Targa, KlientID)
VALUES ('AB125OK', 3);

INSERT INTO Mjetet (Targa, KlientID)
VALUES ('AA153AA', 4);

INSERT INTO Mjetet (Targa, KlientID)
VALUES ('BB496BB', 5);

INSERT INTO Mjetet (Targa, KlientID)
VALUES ('AC145OK', 6);

/********************************************************************************************************************************************************/

CREATE TABLE Karte_Antarsie (
    KarteID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    DataKrijimit DATE NOT NULL,
    DataSkadimit DATE NOT NULL,
    AbonimID NUMBER,
    PikeID NUMBER,
    CONSTRAINT fk_abonimid FOREIGN KEY (AbonimID) REFERENCES Abonimet(AbonimID),
    CONSTRAINT fk_pikeid FOREIGN KEY (PikeID) REFERENCES Pika_Parkimi(PikeID)
);


INSERT INTO Karte_Antarsie (DataKrijimit, DataSkadimit, AbonimID, PikeID)
VALUES (TO_DATE('2025-01-01', 'YYYY-MM-DD'), TO_DATE('2025-12-31', 'YYYY-MM-DD'), 1, 1);

INSERT INTO Karte_Antarsie (DataKrijimit, DataSkadimit, AbonimID, PikeID)
VALUES (TO_DATE('2024-06-01', 'YYYY-MM-DD'), TO_DATE('2025-06-01', 'YYYY-MM-DD'), 2, 2);

INSERT INTO Karte_Antarsie (DataKrijimit, DataSkadimit, AbonimID, PikeID)
VALUES (TO_DATE('2024-07-01', 'YYYY-MM-DD'), TO_DATE('2025-07-01', 'YYYY-MM-DD'), 3, 2);

INSERT INTO Karte_Antarsie (DataKrijimit, DataSkadimit, AbonimID, PikeID)
VALUES (TO_DATE('2025-01-11', 'YYYY-MM-DD'), TO_DATE('2026-01-11', 'YYYY-MM-DD'), 4, 1);

INSERT INTO Karte_Antarsie (DataKrijimit, DataSkadimit, AbonimID, PikeID)
VALUES (TO_DATE('2024-09-01', 'YYYY-MM-DD'), TO_DATE('2025-09-01', 'YYYY-MM-DD'), 5, 1);

INSERT INTO Karte_Antarsie (DataKrijimit, DataSkadimit, AbonimID, PikeID)
VALUES (TO_DATE('2024-05-01', 'YYYY-MM-DD'), TO_DATE('2025-05-01', 'YYYY-MM-DD'), 6, 2);
/********************************************************************************************************************************************************/DROP TABLE CmimetParkimi;

CREATE TABLE Cmime_Parkimi (
    CmimID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    PikeID NUMBER,
    OraNga TIMESTAMP NOT NULL,
    OraDeri TIMESTAMP NOT NULL,
    Cmimi NUMBER(10, 2) NOT NULL,
    CONSTRAINT fk_pikeid_cmim FOREIGN KEY (PikeID) REFERENCES Pika_Parkimi(PikeID)
);


INSERT INTO Cmime_Parkimi (PikeID, OraNga, OraDeri, Cmimi)
VALUES (1, TO_TIMESTAMP('06:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('14:00:00', 'HH24:MI:SS'), 100);


INSERT INTO Cmime_Parkimi (PikeID, OraNga, OraDeri, Cmimi)
VALUES (1, TO_TIMESTAMP('14:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('22:00:00', 'HH24:MI:SS'), 80);


INSERT INTO Cmime_Parkimi (PikeID, OraNga, OraDeri, Cmimi)
VALUES (1, TO_TIMESTAMP('22:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('06:00:00', 'HH24:MI:SS'), 120);


INSERT INTO Cmime_Parkimi (PikeID, OraNga, OraDeri, Cmimi)
VALUES (2, TO_TIMESTAMP('06:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('14:00:00', 'HH24:MI:SS'), 100);


INSERT INTO Cmime_Parkimi (PikeID, OraNga, OraDeri, Cmimi)
VALUES (2, TO_TIMESTAMP('14:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('22:00:00', 'HH24:MI:SS'), 90);


INSERT INTO Cmime_Parkimi (PikeID, OraNga, OraDeri, Cmimi)
VALUES (2, TO_TIMESTAMP('22:00:00', 'HH24:MI:SS'), TO_TIMESTAMP('06:00:00', 'HH24:MI:SS'), 70);

/********************************************************************************************************************************************************/

CREATE TABLE Abonimet (
    AbonimID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Lloji VARCHAR2(10),
    DataFillimi DATE NOT NULL,
    DataMbarimit DATE NOT NULL,
    Cmimi_Abonimi_Mujor NUMBER
);


INSERT INTO Abonimet (Lloji, DataFillimi, DataMbarimit, Cmimi_Abonimi_Mujor)
VALUES ('Mujor', TO_DATE('2024-11-01', 'YYYY-MM-DD'), TO_DATE('2024-12-1', 'YYYY-MM-DD'), 3000);

INSERT INTO Abonimet (Lloji, DataFillimi, DataMbarimit, Cmimi_Abonimi_Mujor)
VALUES ('Mujor', TO_DATE('2024-11-15', 'YYYY-MM-DD'), TO_DATE('2024-12-15', 'YYYY-MM-DD'), 3000);

INSERT INTO Abonimet (Lloji, DataFillimi, DataMbarimit, Cmimi_Abonimi_Mujor)
VALUES ('Mujor', TO_DATE('2025-01-01', 'YYYY-MM-DD'), TO_DATE('2025-02-01', 'YYYY-MM-DD'), 3000);

INSERT INTO Abonimet (Lloji, DataFillimi, DataMbarimit, Cmimi_Abonimi_Mujor)
VALUES (NULL, TO_DATE('2024-11-01', 'YYYY-MM-DD'), TO_DATE('2024-12-1', 'YYYY-MM-DD'), 0);

INSERT INTO Abonimet (Lloji, DataFillimi, DataMbarimit, Cmimi_Abonimi_Mujor)
VALUES (NULL, TO_DATE('2024-11-15', 'YYYY-MM-DD'), TO_DATE('2024-12-15', 'YYYY-MM-DD'), 0);

INSERT INTO Abonimet (Lloji, DataFillimi, DataMbarimit, Cmimi_Abonimi_Mujor)
VALUES (NULL, TO_DATE('2025-01-01', 'YYYY-MM-DD'), TO_DATE('2025-02-01', 'YYYY-MM-DD'), 0);

/********************************************************************************************************************************************************/


CREATE TABLE Aktivitet_Parkimi (
    AktivitetID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    PikeID NUMBER,
    MjetID NUMBER,
    OraHyrjes TIMESTAMP NOT NULL,
    OraDaljes TIMESTAMP,
    CONSTRAINT fk_pikeid_aktivitet FOREIGN KEY (PikeID) REFERENCES Pika_Parkimi(PikeID),
    CONSTRAINT fk_mjetid FOREIGN KEY (MjetID) REFERENCES Mjetet(MjetID)
);


INSERT INTO Aktivitet_Parkimi (PikeID, MjetID, OraHyrjes, OraDaljes)
VALUES (1, 1, TO_TIMESTAMP('2025-01-09 08:30:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2025-01-09 10:30:00', 'YYYY-MM-DD HH24:MI:SS'));


INSERT INTO Aktivitet_Parkimi (PikeID, MjetID, OraHyrjes, OraDaljes)
VALUES (2, 2, TO_TIMESTAMP('2025-01-09 11:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2025-01-09 13:00:00', 'YYYY-MM-DD HH24:MI:SS'));


INSERT INTO Aktivitet_Parkimi (PikeID, MjetID, OraHyrjes, OraDaljes)
VALUES (1, 3, TO_TIMESTAMP('2025-01-10 09:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2025-01-10 11:00:00', 'YYYY-MM-DD HH24:MI:SS'));


INSERT INTO Aktivitet_Parkimi (PikeID, MjetID, OraHyrjes, OraDaljes)
VALUES (2, 4, TO_TIMESTAMP('2025-01-09 10:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2025-01-09 12:00:00', 'YYYY-MM-DD HH24:MI:SS'));


INSERT INTO Aktivitet_Parkimi (PikeID, MjetID, OraHyrjes, OraDaljes)
VALUES (2, 5, TO_TIMESTAMP('2025-01-09 15:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2025-01-09 19:00:00', 'YYYY-MM-DD HH24:MI:SS'));


INSERT INTO Aktivitet_Parkimi (PikeID, MjetID, OraHyrjes, OraDaljes)
VALUES (1, 6, TO_TIMESTAMP('2025-01-09 16:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2025-01-09 21:00:00', 'YYYY-MM-DD HH24:MI:SS'));



/********************************************************************************************************************************************************/

CREATE TABLE Punonjesit (
    PunonjesID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    Emri VARCHAR2(100) NOT NULL,
    Mbiemri VARCHAR2(100) NOT NULL,
    CmimID NUMBER,
    CONSTRAINT fk_cmimid FOREIGN KEY (CmimID) REFERENCES Cmime_Parkimi(CmimID)
);

INSERT INTO Punonjesit (Emri, Mbiemri, CmimID)
VALUES ('Erjon', 'Kola', 1);

INSERT INTO Punonjesit (Emri, Mbiemri, CmimID)
VALUES ('Arbri', 'Musa', 2);

INSERT INTO Punonjesit (Emri, Mbiemri, CmimID)
VALUES ('ANDI', 'PEKA', 3);

INSERT INTO Punonjesit (Emri, Mbiemri, CmimID)
VALUES ('MUSA', 'HOXHA', 4);

INSERT INTO Punonjesit ( Emri, Mbiemri, CmimID)
VALUES ('XHEVDET', 'BARAKU', 5);

INSERT INTO Punonjesit (Emri, Mbiemri, CmimID)
VALUES ('ERGI', 'SPAHIU', 6);

/********************************************************************************************************************************************************/

CREATE TABLE Fatura (
    FaturaID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    AktivitetID NUMBER,
    PunonjesID NUMBER,
    Data_Fatures DATE DEFAULT SYSDATE NOT NULL,
    Totali NUMBER(15, 2) NOT NULL,
    Status VARCHAR2(200) DEFAULT 'Aktive',
    CONSTRAINT fk_aktivitetid FOREIGN KEY (AktivitetID) REFERENCES Aktivitet_Parkimi(AktivitetID) ON DELETE CASCADE,
    CONSTRAINT fk_punonjesid FOREIGN KEY (PunonjesID) REFERENCES Punonjesit(PunonjesID)
);


CREATE OR REPLACE FUNCTION llogarit_fature(
    in_punonjes_id IN NUMBER,
    in_AktivitetID IN NUMBER
) RETURN NUMBER IS
    out_cmimi NUMBER;
    in_ora_hyrjes TIMESTAMP;
    in_ora_daljes TIMESTAMP;
    koha_totale NUMBER;
    totali NUMBER;
    abonim_aktiv NUMBER;
    zbritje NUMBER(5, 2) := 0;
BEGIN
    
    SELECT OraHyrjes, OraDaljes
    INTO in_ora_hyrjes, in_ora_daljes
    FROM Aktivitet_Parkimi
    WHERE AktivitetID = in_AktivitetID;

  
    SELECT COUNT(*)
    INTO abonim_aktiv
    FROM Karte_Antarsie ka
    JOIN Abonimet ab ON ka.AbonimID = ab.AbonimID
    WHERE ka.KarteID = (
        SELECT k.KarteID
        FROM Klientet k
        JOIN Mjetet m ON k.KlientID = m.KlientID
        WHERE m.MjetID = (
            SELECT MjetID
            FROM Aktivitet_Parkimi
            WHERE AktivitetID = in_AktivitetID
        )
    )
    AND ab.Lloji = 'Mujor'
    AND SYSDATE BETWEEN ka.DataKrijimit AND ka.DataSkadimit;

    IF abonim_aktiv > 0 THEN
        RETURN 0;
    END IF;

   
    SELECT NVL(g.Zbritje, 0)
    INTO zbritje
    FROM Grupe_Klientesh g
    JOIN Klientet k ON g.GrupID = k.GrupID
    JOIN Mjetet m ON k.KlientID = m.KlientID
    WHERE m.MjetID = (
        SELECT MjetID
        FROM Aktivitet_Parkimi
        WHERE AktivitetID = in_AktivitetID
    );

    
    koha_totale := EXTRACT(HOUR FROM (in_ora_daljes - in_ora_hyrjes)) +
                   EXTRACT(MINUTE FROM (in_ora_daljes - in_ora_hyrjes)) / 60;

   
    SELECT cmimi
    INTO out_cmimi
    FROM Punonjesit JOIN Cmime_Parkimi ON punonjesit.CmimID = cmime_parkimi.CmimID
    WHERE punonjesid = in_punonjes_id;

   
    totali := koha_totale * out_cmimi * (1 - zbritje / 100);

    RETURN totali;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN NULL;
END;




CREATE OR REPLACE PROCEDURE shto_fature(
    in_punonjes_id IN NUMBER,
    in_aktivitet_id IN NUMBER
) IS
    out_totali NUMBER;
    data_fatures DATE;
BEGIN
    
    SELECT TRUNC(OraHyrjes) 
    INTO data_fatures
    FROM Aktivitet_Parkimi
    WHERE AktivitetID = in_aktivitet_id;
   
    out_totali := llogarit_fature(in_punonjes_id, in_aktivitet_id);
   
    IF out_totali IS NULL THEN
        RAISE_APPLICATION_ERROR(-20002, 'Nuk u gjeten te dhena te mjaftueshme per te llogaritur faturen.');
    END IF;

    INSERT INTO Fatura (AktivitetID, PunonjesID, Data_Fatures, Totali)
    VALUES (in_aktivitet_id, in_punonjes_id, data_fatures, out_totali);
END;

-- Shto fature per PunonjesID = ? dhe AktivitetID = ?
BEGIN
    shto_fature(1, 1);
END;

BEGIN
    shto_fature(4, 2);
END;

BEGIN
    shto_fature(1, 3);
END;

BEGIN
    shto_fature(4, 4);
END;

BEGIN
    shto_fature(5, 5);
END;

BEGIN
    shto_fature(5, 6);
END;



/********************************************************************************************************************************************************/
CREATE TABLE Gjendja_Arkes (
    GjendjaID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    PunonjesID NUMBER,
    Data DATE NOT NULL,
    Totali NUMBER(15, 2) NOT NULL,
    CONSTRAINT fk_punonjesid_gjendja FOREIGN KEY (PunonjesID) REFERENCES Punonjesit(PunonjesID)
);

INSERT INTO Gjendja_Arkes (PunonjesID, Data, Totali)
VALUES (1, TO_DATE('2025-01-09', 'YYYY-MM-DD'), 0);

INSERT INTO Gjendja_Arkes (PunonjesID, Data, Totali)
VALUES (2, TO_DATE('2025-01-09', 'YYYY-MM-DD'), 0);

INSERT INTO Gjendja_Arkes (PunonjesID, Data, Totali)
VALUES (3, TO_DATE('2025-01-09', 'YYYY-MM-DD'), 0);   // kemi vendosur totalin 0 sepse ai eshte shuma dhe kur bejme update ato do ndryshojne

INSERT INTO Gjendja_Arkes (PunonjesID, Data, Totali)
VALUES (4, TO_DATE('2025-01-09', 'YYYY-MM-DD'), 0);

INSERT INTO Gjendja_Arkes (PunonjesID, Data, Totali)
VALUES (5, TO_DATE('2025-01-09', 'YYYY-MM-DD'), 0);

INSERT INTO Gjendja_Arkes (PunonjesID, Data, Totali)
VALUES (6, TO_DATE('2025-01-09', 'YYYY-MM-DD'), 0);

/********************************************************************************************************************************************************/

CREATE OR REPLACE PROCEDURE MbylljeAktivitetiDitor (
    p_Data IN DATE 
) AS
BEGIN
   
    MERGE INTO Gjendja_Arkes ga
    USING (
        SELECT 
            f.PunonjesID,
            SUM(f.Totali) AS TotaliDitor
        FROM Fatura f
        WHERE f.Data_Fatures = p_Data
        GROUP BY f.PunonjesID
    ) ft
    ON (ga.PunonjesID = ft.PunonjesID AND ga.Data = p_Data)
    WHEN MATCHED THEN
        UPDATE SET ga.Totali = ft.TotaliDitor
    WHEN NOT MATCHED THEN
        INSERT (PunonjesID, Data, Totali)
        VALUES (ft.PunonjesID, p_Data, ft.TotaliDitor);
   
    DBMS_OUTPUT.PUT_LINE('Mbyllja e aktivitetit ditor u krye me sukses per daten: ' || TO_CHAR(p_Data, 'YYYY-MM-DD'));
END MbylljeAktivitetiDitor;


BEGIN
    MbylljeAktivitetiDitor(TO_DATE('2025-01-09', 'YYYY-MM-DD'));
END;


/********************************************************************************************************************************************************/


/*
 Te mos lejohet shitja nese nje mjet (me te njejten targe) te jete i parkuar ne nje pike parkimi ne ate çast perdorur trigger-at.
*/


CREATE OR REPLACE TRIGGER Kontrollo_Parkimin_Targe
BEFORE INSERT ON Aktivitet_parkimi
FOR EACH ROW
DECLARE
    nr_mjeteve NUMBER;
    new_targa VARCHAR2(50);
BEGIN
    SELECT targa
    INTO new_targa
    FROM Mjetet
    WHERE MjetID = :NEW.MjetID;
    
    SELECT COUNT(*)
    INTO nr_mjeteve
    FROM Aktivitet_Parkimi
    JOIN Mjetet ON aktivitet_parkimi.MjetID = mjetet.MjetID
    WHERE targa = new_targa
    AND 
    ((NOT(:NEW.OraHyrjes > OraDaljes AND :NEW.OraDaljes > OraDaljes)) 
    OR NOT(:NEW.OraHyrjes < OraHyrjes AND :NEW.OraDaljes < OraHyrjes));
    
    IF nr_mjeteve > 0 THEN
    RAISE_APPLICATION_ERROR(-20002, 'Kjo makine eshte parkuar dhe nuk mund te parkohet perseri !!!');
    END IF;
END;


// TESTIMI
INSERT INTO Aktivitet_Parkimi (PikeID, MjetID, OraHyrjes)
VALUES (1, 1, TO_TIMESTAMP('2025-01-09 08:30:00', 'YYYY-MM-DD HH24:MI:SS'));

/********************************************************************************************************************************************************/

/* 
Shitjes do ti ofrohet mundesia qe te behet edhe anulim i tyre duke gjeneruar te njejten fature me vlere negative ne rastet kur ka pagese. 
Kjo do realizohet me ane te procedurave ne DB.
*/

CREATE OR REPLACE PROCEDURE AnuloFature (
    p_FaturaID IN NUMBER 
) AS
    v_Totali NUMBER(15, 2);
    v_PunonjesID NUMBER;
    v_Data_Fatures DATE;
    v_AktivitetID NUMBER;
    
BEGIN
    SELECT Totali, AktivitetID, PunonjesID, Data_Fatures 
    INTO v_Totali,v_AktivitetID, v_PunonjesID, v_Data_Fatures
    FROM Fatura
    WHERE FaturaID = p_FaturaID;
 
    INSERT INTO Fatura (AktivitetID, PunonjesID, Data_Fatures, Totali, Status)
    VALUES (v_AktivitetID, v_PunonjesID, v_Data_Fatures, -v_Totali, 'Anuluar');
 
END AnuloFature;


//TESTIMI
BEGIN
    AnuloFature(4); 
END;

/********************************************************************************************************************************************************/

SELECT * FROM Grupe_Klientesh;
SELECT * FROM Klientet;
SELECT * FROM Pika_Parkimi;
SELECT * FROM Mjetet;
SELECT * FROM Karte_Antarsie;
SELECT * FROM Cmime_Parkimi;
SELECT * FROM Abonimet;
SELECT * FROM Aktivitet_Parkimi;
SELECT * FROM Punonjesit;
SELECT * FROM Fatura;
SELECT * FROM Gjendja_Arkes;

/********************************************************************************************************************************************************/

ALTER TABLE Fatura ADD Statusi varchar2(20);

